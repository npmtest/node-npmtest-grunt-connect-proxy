{"/home/travis/build/npmtest/node-npmtest-grunt-connect-proxy/test.js":"/* istanbul instrument in package npmtest_grunt_connect_proxy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-connect-proxy/lib.npmtest_grunt_connect_proxy.js":"/* istanbul instrument in package npmtest_grunt_connect_proxy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_connect_proxy = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_connect_proxy = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-connect-proxy/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-connect-proxy && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_connect_proxy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_connect_proxy\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_connect_proxy.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_connect_proxy.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_connect_proxy.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_connect_proxy.__dirname + '/lib.npmtest_grunt_connect_proxy.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-connect-proxy/node_modules/grunt-connect-proxy/Gruntfile.js":"/*\n * grunt-connect-proxy\n * https://github.com/drewzboto/grunt-connect-proxy\n *\n * Copyright (c) 2013 Drewz\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nmodule.exports = function(grunt) {\n\n  var proxySnippet = require(\"./lib/utils.js\").proxyRequest;\n\n  // Project configuration.\n  grunt.initConfig({\n    jshint: {\n      all: [\n        'Gruntfile.js',\n        'tasks/*.js',\n        'lib/*.js',\n        '<%= nodeunit.tests %>'\n      ],\n      options: {\n        jshintrc: '.jshintrc'\n      }\n    },\n\n    // Before generating any new files, remove any previously-created files.\n    clean: {\n      tests: ['tmp']\n    },\n\n    // Configuration to be run (and then tested).\n    connect: {\n      options: {\n          port: 9000,\n          // change this to '0.0.0.0' to access the server from outside\n          hostname: 'localhost'\n      },\n      proxies:\n      [\n            {\n              context: '/defaults',\n              host: 'www.defaults.com'\n            },\n            {\n              context: '/full',\n              host: 'www.full.com',\n              port: 8080,\n              https: true,\n              xforward: true,\n              rewrite: {\n                '^/full': '/anothercontext'\n              },\n              headers: {\n                \"X-Proxied-Header\": \"added\"\n              },\n              ws: true\n            },\n            {\n              context: '/context/test',\n              host: 'www.anothercontext.com',\n              rewrite: {\n                '^/context': '/anothercontext',\n                'test': 'testing'\n              }\n            },\n            {\n              context: '/invalidrewrite',\n              host: 'www.invalidrewrite.com',\n              rewrite: {\n                '^/undefined': undefined,\n                '^/notstring': 13,\n                '^/in': '/thisis'\n              }\n            },\n            {\n              context: '/missinghost'\n            },\n            {\n              host: 'www.missingcontext.com'\n            },\n            {\n              context: ['/array1','/array2'],\n              host: 'www.defaults.com'\n            }\n      ],\n      server2: {\n        proxies: [\n          {\n            context: '/',\n            host: 'www.server2.com'\n          }\n        ]\n      },\n      server3: {\n        appendProxies: false,\n        proxies: [\n          {\n            context: '/server3',\n            host: 'www.server3.com',\n            port: 8080,\n          }\n        ]\n      },\n      request: {\n        options: {\n          middleware: function (connect, options) {\n            return [require('./lib/utils').proxyRequest];\n          }\n        },\n        proxies: [\n          {\n            context: '/request',\n            host: 'localhost',\n            port: 8080,\n            headers: {\n              \"x-proxied-header\": \"added\"\n            }\n          },\n          {\n            context: '/hideHeaders',\n            host: 'localhost',\n            port: 8081,\n            hideHeaders: ['x-hidden-header-1', 'x-hidden-header-2']\n          }\n        ]\n      }\n    },\n\n    // Unit tests.\n    nodeunit: {\n      tests: 'test/connect_proxy_test.js',\n      server2: 'test/server2_proxy_test.js',\n      server3: 'test/server3_proxy_test.js',\n      utils: 'test/utils_test.js',\n      request: 'test/request_test.js',\n      hideHeaders: 'test/hide_headers_test.js'\n    }\n\n  });\n\n  // Actually load this plugin's task(s).\n  grunt.loadTasks('tasks');\n\n  // These plugins provide necessary tasks.\n  grunt.loadNpmTasks('grunt-contrib-connect');\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n  grunt.loadNpmTasks('grunt-contrib-clean');\n  grunt.loadNpmTasks('grunt-contrib-nodeunit');\n\n  // Whenever the \"test\" task is run, first clean the \"tmp\" dir, then run this\n  // plugin's task(s), then test the result.\n  grunt.registerTask('test', [\n    'clean',\n    'nodeunit:utils',\n    'configureProxies',\n    'nodeunit:tests',\n    'configureProxies:server2',\n    'nodeunit:server2',\n    'configureProxies:server3',\n    'nodeunit:server3',\n    'configureProxies:request',\n    'connect:request',\n    'nodeunit:request',\n    'nodeunit:hideHeaders'\n    ]);\n\n  // specifically test that option inheritance works for multi-level config\n  grunt.registerTask('test-inheritance', [\n    'clean',\n    'configureProxies:server2',\n    'nodeunit:server2'\n  ]);\n\n\n  // By default, lint and run all tests.\n  grunt.registerTask('default', ['jshint', 'test']);\n\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-connect-proxy/node_modules/grunt-connect-proxy/lib/utils.js":"'use strict';\nvar utils = module.exports;\nvar httpProxy = require('http-proxy');\nvar grunt = require('grunt');\nvar _ = require('lodash');\nvar proxies = [];\nvar rewrite = function (req) {\n    return function (rule) {\n        if (rule.from.test(req.url)) {\n            req.url = req.url.replace(rule.from, rule.to);\n        }\n    };\n};\n\nutils.registerProxy = function(proxy) {\n    proxies.push(proxy);\n};\n\nutils.proxies = function() {\n    return proxies;\n};\n\nutils.reset = function() {\n    proxies = [];\n};\n\nutils.validateRewrite = function (rule) {\n    if (!rule ||\n        typeof rule.from === 'undefined' ||\n        typeof rule.to === 'undefined' ||\n        typeof rule.from !== 'string' ||\n        typeof rule.to !== 'string') {\n        return false;\n    }\n    return true;\n};\n\nutils.processRewrites = function (rewrites) {\n    var rules = [];\n\n    Object.keys(rewrites || {}).forEach(function (from) {\n        var rule = {\n            from: from,\n            to: rewrites[from]\n        };\n\n        if (utils.validateRewrite(rule)) {\n            rule.from = new RegExp(rule.from);\n            rules.push(rule);\n            grunt.log.writeln('Rewrite rule created for: [' + rule.from + ' -> ' + rule.to + '].');\n        } else {\n            grunt.log.error('Invalid rule');\n        }\n    });\n\n    return rules;\n};\n\nutils.matchContext = function(context, url) {\n    var positiveContexts, negativeContexts, positiveMatch, negativeMatch;\n    var contexts = context;\n    if (!_.isArray(contexts)) {\n        contexts = [contexts];\n    }\n    positiveContexts = _.filter(contexts, function(c){return c.charAt(0) !== '!';});\n    negativeContexts = _.filter(contexts, function(c){return c.charAt(0) === '!';});\n    // Remove the '!' character from the contexts\n    negativeContexts = _.map(negativeContexts, function(c){return c.slice(1);});\n    negativeMatch = _.find(negativeContexts, function(c){return url.lastIndexOf(c, 0) === 0;});\n    // If any context negates this url, it must not be proxied.\n    if (negativeMatch) {\n        return false;\n    }\n    positiveMatch = _.find(positiveContexts, function(c){return url.lastIndexOf(c, 0) === 0;});\n    // If there is any positive match, lets proxy this url.\n    return positiveMatch != null;\n};\n\nfunction onUpgrade(req, socket, head) {\n    var proxied = false;\n\n    proxies.forEach(function(proxy) {\n        if (!proxied && req && proxy.config.ws && utils.matchContext(proxy.config.context, req.url)) {\n            if (proxy.config.rules.length) {\n                proxy.config.rules.forEach(rewrite(req));\n            }\n            proxy.server.ws(req, socket, head);\n\n            proxied = true;\n\n            var source = req.url;\n            var target = (proxy.server.options.secure ? 'wss://' : 'ws://') + proxy.server.options.target.host + ':' + proxy.server.options.target.port + req.url;\n            grunt.log.verbose.writeln('[WS] Proxied request: ' + source + ' -> ' + target + '\\n' + JSON.stringify(req.headers, true, 2));\n        }\n    });\n}\n\n//Listen for the update event,onces. grunt-contrib-connect doesnt expose the server object, so bind after the first req\nfunction enableWebsocket(server) {\n    if (server && !server.proxyWs) {\n        server.proxyWs = true;\n        grunt.log.verbose.writeln('[WS] Catching upgrade event...');\n        server.on('upgrade', onUpgrade);\n    }\n}\n\nfunction removeHiddenHeaders(proxy) {\n    var hiddenHeaders = proxy.config.hideHeaders;\n\n    if(hiddenHeaders && hiddenHeaders.length > 0) {\n        proxy.server.on('proxyRes', function(proxyRes) {\n            var headers = proxyRes.headers;\n            hiddenHeaders.forEach(function(header) {\n                if(header in headers) {\n                    delete headers[header];\n                }\n            });\n        });\n    }\n}\n\nutils.proxyRequest = function (req, res, next) {\n    var proxied = false;\n\n    enableWebsocket(req.connection.server);\n\n    proxies.forEach(function(proxy) {\n        if (!proxied && req && utils.matchContext(proxy.config.context, req.url)) {\n            if (proxy.config.rules.length) {\n                proxy.config.rules.forEach(rewrite(req));\n            }\n            // Add headers present in the config object\n            if (proxy.config.headers != null) {\n                _.forOwn(proxy.config.headers, function(value, key) {\n                    req.headers[key] = value;\n                });\n            }\n\n            proxy.server.proxyRequest(req, res, proxy.server);\n            removeHiddenHeaders(proxy);\n\n            // proxying twice would cause the writing to a response header that is already sent. Bad config!\n            proxied = true;\n\n            var source = req.originalUrl;\n            var target = (proxy.server.options.secure ? 'https://' : 'http://') + proxy.server.options.target.host + ':' + proxy.server.options.target.port + req.url;\n            grunt.log.verbose.writeln('Proxied request: ' + source + ' -> ' + target + '\\n' + JSON.stringify(req.headers, true, 2));\n        }\n    });\n    if (!proxied) {\n        next();\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-connect-proxy/node_modules/grunt-connect-proxy/tasks/connect_proxy.js":"/*\n * grunt-connect-proxy\n * https://github.com/drewzboto/grunt-connect-proxy\n *\n * Copyright (c) 2013 Drewz\n * Licensed under the MIT license.\n */\n\n'use strict';\nvar utils = require('../lib/utils');\nvar _ = require('lodash');\n\nmodule.exports = function(grunt) {\n  grunt.registerTask('configureProxies', 'Configure any specified connect proxies.', function(config) {\n    // setup proxy\n    var httpProxy = require('http-proxy');\n    var proxyOption;\n    var proxyOptions = [];\n    var validateProxyConfig = function(proxyOption) {\n        if (_.isUndefined(proxyOption.host) || _.isUndefined(proxyOption.context)) {\n            grunt.log.error('Proxy missing host or context configuration');\n            return false;\n        }\n        if (proxyOption.https && proxyOption.port === 80) {\n            grunt.log.warn('Proxy  for ' + proxyOption.context + ' is using https on port 80. Are you sure this is correct?');\n        }\n        return true;\n    };\n\n    utils.reset();\n    utils.log = grunt.log;\n    if (config) {\n        var connectOptions = grunt.config('connect.'+config) || [];\n        if (typeof connectOptions.appendProxies === 'undefined' || connectOptions.appendProxies) {\n            proxyOptions = proxyOptions.concat(grunt.config('connect.proxies') || []);\n        }\n        proxyOptions = proxyOptions.concat(connectOptions.proxies || []);\n    } else {\n        proxyOptions = proxyOptions.concat(grunt.config('connect.proxies') || []);\n    }\n    proxyOptions.forEach(function(proxy) {\n        proxyOption = _.defaults(proxy,  {\n            port: 80,\n            https: false,\n            xforward: false,\n            rules: [],\n            ws: false\n        });\n        if (validateProxyConfig(proxyOption)) {\n            proxyOption.rules = utils.processRewrites(proxyOption.rewrite);\n            utils.registerProxy({\n              server: httpProxy.createProxyServer({\n                target: proxyOption,\n                secure: proxyOption.https,\n                xfwd: proxyOption.xforward\n              }).on('error', function (err, req, res) { \n                grunt.log.error('Proxy error: ', err.code);\n              }),\n              config: proxyOption\n            });\n            grunt.log.writeln('Proxy created for: ' +  proxyOption.context + ' to ' + proxyOption.host + ':' + proxyOption.port);\n        }\n    });\n  });\n};\n"}